{
  "create entity": {
    "prefix": "c-entity",
    "body": [
      "import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";",
      "",
      "@Entity(\"${1:book}\")",
      "export class ${2:Book} {",
      "  @PrimaryGeneratedColumn()",
      "  id!: number;",
      "",
      "  @Column()",
      "  ${3:name}!: string;",
      "",
      "  @Column({ type: \"datetime\", name: \"created_at\" })",
      "  created_at!: string;",
      "",
      "  @Column()",
      "  created_by!: string;",
      "",
      "  @Column({ type: \"datetime\", name: \"updated_at\" })",
      "  updated_at!: string;",
      "",
      "  @Column()",
      "  updated_by!: string;",
      "}",
      ""
    ],
    "description": "Create a new entity"
  },
  "create service": {
    "prefix": "c-service",
    "body": [
      "import CrudService from \"./base/crud.service\";",
      "import db from \"../data-source\";",
      "import { ${1:Book} } from \"../export\";",
      "",
      "const ${2:repository} = db.getRepository(${1:Book});",
      "",
      "export default class BookService extends CrudService<${1:Book}> {",
      "  constructor() {",
      "    super(${2:repository});",
      "  }",
      "}",
      ""
    ],
    "description": "Create a new service"
  },
  "create controller": {
    "prefix": "c-controller",
    "body": [
      "import {",
      "  Body,",
      "  ContentType,",
      "  Controller,",
      "  CurrentUser,",
      "  Delete,",
      "  Get,",
      "  Param,",
      "  Post,",
      "  Put,",
      "  QueryParams,",
      "  UseBefore,",
      "} from \"routing-controllers\";",
      "import { ${2:Book}, ${2:Book}Service } from \"../export\";",
      "import { authenticateToken } from \"../middlewares/jwt\";",
      "import { PageQuery, TokenUser } from \"../typing\";",
      "",
      "@Controller(\"/${1:book}\")",
      "export class BookController {",
      "  service: ${2:Book}Service;",
      "",
      "  constructor() {",
      "    this.service = new ${2:Book}Service();",
      "  }",
      "",
      "  @Get(\"/\")",
      "  @UseBefore(authenticateToken)",
      "  async queryList(@QueryParams() query: PageQuery<Partial<${2:Book}>>) {",
      "    return this.service.queryList(query);",
      "}",
      "",
      "  @Get(\"/:id\")",
      "  @UseBefore(authenticateToken)",
      "  async queryById(@Param(\"id\") id: number) {",
      "    return this.service.queryOne({ id });",
      "  }",
      "",
      "  @Post(\"/\")",
      "  @UseBefore(authenticateToken)",
      "  @ContentType(\"application/json\")",
      "  async create(@Body() body: ${2:Book}, @CurrentUser() user: TokenUser) {",
      "    return this.service.create({ ...body, created_by: user.username });",
      "  }",
      "",
      "  @Put(\"/:id\")",
      "  @UseBefore(authenticateToken)",
      "  @ContentType(\"application/json\")",
      "  async update(@Param(\"id\") id: number, @Body() body: ${2:Book}, @CurrentUser() user: TokenUser) {",
      "    return this.service.update(id, { ...body, updated_by: user.username });",
      "  }",
      "",
      "  @Delete(\"/:id\")",
      "  @UseBefore(authenticateToken)",
      "  async delete(@Param(\"id\") id: number) {",
      "    return this.service.delete(id);",
      "  }",
      "}",
      ""
    ],
    "description": "Create a new controller"
  }
}
