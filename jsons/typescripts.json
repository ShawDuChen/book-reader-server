{
  "create entity": {
    "prefix": "c-entity",
    "body": [
      "import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";",
      "",
      "@Entity(\"${1:book}\")",
      "export class ${2:Book} {",
      "  @PrimaryGeneratedColumn({ comment: \"ID\"})",
      "  id!: number;",
      "",
      "  @Column({ type: \"varchar\", length: 255 })",
      "  ${3:name}!: string;",
      "",
      "@Column({ type: \"varchar\", length: 255, nullable: true, comment: \"备注\" })",
      "remark?: string;",
      "",
      "@CreateDateColumn({",
      "  type: \"datetime\",",
      "  name: \"created_at\",",
      "  nullable: true,",
      "  comment: \"创建日期\",",
      "})",
      "created_at?: string;",
      "",
      "@Column({ type: \"varchar\", length: 255, nullable: true, comment: \"创建人\" })",
      "created_by?: string;",
      "",
      "@UpdateDateColumn({",
      "  type: \"datetime\",",
      "  name: \"updated_at\",",
      "  nullable: true,",
      "  comment: \"更新日期\",",
      "})",
      "updated_at?: string;",
      "",
      "@Column({ type: \"varchar\", nullable: true, comment: \"最后操作人\" })",
      "updated_by?: string;",
      "}",
      ""
    ],
    "description": "Create a new entity"
  },
  "create service": {
    "prefix": "c-service",
    "body": [
      "import CrudService from \"./base/crud.service\";",
      "import db from \"../data-source\";",
      "import { ${1:Book} } from \"../export\";",
      "",
      "const ${2:repository} = db.getRepository(${1:Book});",
      "",
      "export default class ${1:Book}Service extends CrudService<${1:Book}> {",
      "  constructor() {",
      "    super(${2:repository});",
      "  }",
      "}",
      ""
    ],
    "description": "Create a new service"
  },
  "create controller": {
    "prefix": "c-controller",
    "body": [
      "import {",
      "  Body,",
      "  ContentType,",
      "  Controller,",
      "  CurrentUser,",
      "  Delete,",
      "  Get,",
      "  Param,",
      "  Post,",
      "  Put,",
      "  QueryParams,",
      "  UseBefore,",
      "} from \"routing-controllers\";",
      "import { ${2:Book}, ${2:Book}Service } from \"../export\";",
      "import { authenticateToken } from \"../middlewares/jwt\";",
      "import { PageQuery, TokenUser } from \"../typing\";",
      "",
      "@Controller(\"/${1:book}\")",
      "@UseBefore(authenticateToken)",
      "export class ${2:Book}Controller {",
      "  service: ${2:Book}Service;",
      "",
      "  constructor() {",
      "    this.service = new ${2:Book}Service();",
      "  }",
      "",
      "  @Get(\"/\")",
      "  async queryList(@QueryParams() query: PageQuery<Partial<${2:Book}>>) {",
      "    return this.service.queryList(query);",
      "}",
      "",
      "  @Get(\"/all\")",
      "  async quertAll() {",
      "    return this.service.getAll();",
      "  }",
      "",
      "",
      "  @Get(\"/:id\")",
      "  async queryById(@Param(\"id\") id: number) {",
      "    return this.service.queryOne({ id });",
      "  }",
      "",
      "  @Post(\"/\")",
      "  @ContentType(\"application/json\")",
      "  async create(@Body() body: ${2:Book}, @CurrentUser() user: TokenUser) {",
      "    return this.service.create({ ...body, created_by: user.username });",
      "  }",
      "",
      "  @Put(\"/:id\")",
      "  @ContentType(\"application/json\")",
      "  async update(@Param(\"id\") id: number, @Body() body: ${2:Book}, @CurrentUser() user: TokenUser) {",
      "    return this.service.update(id, { ...body, updated_by: user.username });",
      "  }",
      "",
      "  @Delete(\"/:id\")",
      "  async delete(@Param(\"id\") id: number) {",
      "    return this.service.delete(id);",
      "  }",
      "}",
      ""
    ],
    "description": "Create a new controller"
  }
}